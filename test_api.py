#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AInventory API
"""

import requests
import json
import time
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000/api/v1"
EXAMPLES_DIR = Path("examples")

def test_health():
    """–¢–µ—Å—Ç health check endpoint"""
    print("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    try:
        response = requests.get("http://localhost:8000/health")
        if response.status_code == 200:
            print("‚úÖ Health check: OK")
            return True
        else:
            print(f"‚ùå Health check: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return False

def test_templates():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∞–π–ª–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤...")
    try:
        response = requests.get(f"{API_BASE_URL}/data/templates")
        if response.status_code == 200:
            templates = response.json()
            print("‚úÖ –®–∞–±–ª–æ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã:")
            for file_type, template in templates.items():
                print(f"   {file_type}: {len(template['columns'])} –∫–æ–ª–æ–Ω–æ–∫")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_file_upload(file_path, file_type):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    print(f"\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {file_path.name}")
    
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    try:
        with open(file_path, 'rb') as f:
            files = {'file': (file_path.name, f, 'text/csv')}
            data = {'file_type': file_type}
            
            response = requests.post(
                f"{API_BASE_URL}/data/upload",
                files=files,
                data=data
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {result['message']}")
                print(f"   ID —Ñ–∞–π–ª–∞: {result['file_id']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                print(f"   –î–µ—Ç–∞–ª–∏: {response.text}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_uploads_list():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫...")
    try:
        response = requests.get(f"{API_BASE_URL}/data/uploads")
        if response.status_code == 200:
            uploads = response.json()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∑–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {len(uploads)}")
            for upload in uploads[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   {upload['filename']} - {upload['status']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_inventory_analytics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...")
    try:
        response = requests.get(f"{API_BASE_URL}/analytics/inventory/overview")
        if response.status_code == 200:
            analytics = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {analytics['total_products']}")
            print(f"   –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {analytics['low_stock_items']}")
            print(f"   –ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞: {analytics['out_of_stock_items']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_dashboard_summary():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞...")
    try:
        response = requests.get(f"{API_BASE_URL}/analytics/dashboard/summary")
        if response.status_code == 200:
            summary = response.json()
            print("‚úÖ –°–≤–æ–¥–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   –ü—Ä–æ–¥–∞–∂–∏ (30 –¥–Ω–µ–π): {summary['sales']['recent_sales']}")
            print(f"   –í—ã—Ä—É—á–∫–∞: {summary['sales']['recent_revenue']}")
            print(f"   –¢–æ–≤–∞—Ä–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {summary['inventory']['total_products']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AInventory API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not test_health():
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ endpoints
    test_templates()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
    if EXAMPLES_DIR.exists():
        print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
        products_file = EXAMPLES_DIR / "sample_products.csv"
        if products_file.exists():
            test_file_upload(products_file, "products")
            time.sleep(2)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        inventory_file = EXAMPLES_DIR / "sample_inventory.csv"
        if inventory_file.exists():
            test_file_upload(inventory_file, "inventory")
            time.sleep(2)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏
        sales_file = EXAMPLES_DIR / "sample_sales.csv"
        if sales_file.exists():
            test_file_upload(sales_file, "sales")
            time.sleep(2)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    test_uploads_list()
    test_inventory_analytics()
    test_dashboard_summary()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:")
    print("   http://localhost:8000/docs")
    print("\nüîç ReDoc –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:")
    print("   http://localhost:8000/redoc")

if __name__ == "__main__":
    main()
